<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>lizherui's blog</title><link href="lizherui.github.io/" rel="alternate"></link><link href="lizherui.github.io/feeds/all-zhs.atom.xml" rel="self"></link><id>lizherui.github.io/</id><updated>2013-07-27T00:00:00+08:00</updated><entry><title>温暖的杭州人</title><link href="lizherui.github.io/wen-nuan-de-hang-zhou-ren.html" rel="alternate"></link><updated>2013-07-27T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:lizherui.github.io,2013-07-27:wen-nuan-de-hang-zhou-ren.html</id><summary type="html">&lt;p&gt;昨天傍晚我骑车去买水果，买完回去时忘记骑车了，没锁。快半夜才想起来这事，赶紧跑到已经关门的水果店门口，果然，车子没了。正当我郁闷地准备往回走时，没想到在水果店里看到了我的车子，一股暖意涌上心头。&lt;/p&gt;
&lt;p&gt;我每天早上上班的时候会去楼下那个早餐店买包子。有一次买了4块5的东西，但是我手里只有4块零钱和20块整钱。我正准备给他20块钱，没想到他说：给4块钱得了，下次来的时候再给剩下的5毛吧。&lt;/p&gt;
&lt;p&gt;大家都知道江浙一代的人很会做生意，如今身临其境，确实开了眼界。这边做小本生意的人，不拘小节，也不看重短期的小利益，头脑、心态、眼光都很赞。&lt;/p&gt;
&lt;p&gt;这方面我会多加留意，用心学习。&lt;/p&gt;</summary><category term="杭州"></category><category term="生活"></category></entry><entry><title>编辑器与IDE</title><link href="lizherui.github.io/bian-ji-qi-yu-ide.html" rel="alternate"></link><updated>2013-07-25T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:lizherui.github.io,2013-07-25:bian-ji-qi-yu-ide.html</id><summary type="html">&lt;p&gt;虽然eclim很强悍，但由于它并没有集成任何的java debug功能，因此用vim+eclim的组合开发java仍然显得力不从心。&lt;/p&gt;
&lt;p&gt;我最终决定回到eclipse的怀抱中。同时，出于对逐渐丧失vim武功的担忧，我决定使用eclipse+viplugin的组合：编辑代码使用vim的指法，其它事情全部交给eclipse。&lt;/p&gt;
&lt;p&gt;这样用了一段时间，节奏还不错，而且eclipse一些强大的功能让我刮目相看，并让我开始反思之前对待编辑器与IDE的态度。&lt;/p&gt;
&lt;p&gt;IDE里面确实蕴含了比普通文本编辑器高级很多的技术。IDE会对程序文本进行真正的解析，之后才开始分析里面的结构。它们的“跳转到定义”一般都是很精确的跳转，而不是像文本编辑器那样瞎猜。&lt;/p&gt;
&lt;p&gt;此外，IDE代码补全的精准度与速度都远远超过了vim的任何插件；IDE对于java的接口与实现、类与类的继承关系、反射等稍高级的功能都支持得非常好。&lt;/p&gt;
&lt;p&gt;vim在这些方面确实做得不好，也不可能做得好。&lt;/p&gt;
&lt;p&gt;这样说来，vim的唯一优势就只是它那极其符合人体工程学的指法带来的行云流水般的操作快感了。&lt;/p&gt;
&lt;p&gt;不像php, python等所见即所得的解释性语言，java这种编译型的语言，若通过打日志来调试，那么每加一条调试用的日志代码，就要重新编译一次，实在是太低效了。而eclipse的调试功能确实是太强大了，调试过程中每个变量的值也都是清清楚楚。&lt;/p&gt;
&lt;p&gt;很多长期使用vim/emacs的人都容易对IDE抱有或多或少的偏见。没错，开发shell, php, python, ruby这样的解释性语言，用vim/emacs确实非常合适，也能满足需求，相比之下用IDE开发它们就会显得有些笨拙。&lt;/p&gt;
&lt;p&gt;但是最近开发java的经历让我逐渐冷静了下来，开始仔细地反思这件事情。就像没有万能的编程语言一样，也没有万能的编辑器。vim很强悍，emacs也很厉害，但是它俩在面对java这样的语言时，确实无法跟eclipse相提并论。&lt;/p&gt;
&lt;p&gt;eclipse能让java程序员的头脑从琐碎的细节里面解脱出来，所以我们能够更加专注于程序本身的语义和算法，这样我们能写出更加优美和可靠的程序。这就是我用eclipse写java程序的时候相对于vim的感觉。我感觉到自己能够看见程序背后所表现的模型，而不只是看到程序的文本和细节。&lt;/p&gt;
&lt;p&gt;最后我想说的是，eclipse这件事情对我触动很大。我开始渐渐认可这样的观点：程序员对诸如编程语言、编辑器这类事物产生宗教般的信仰或偏见确实是没有必要的。我们应该更加多元化地发展，学会尊重别的技术和别的事物，学会去发现、认可每件技术的优势与劣势。&lt;/p&gt;
&lt;p&gt;天下武功，确实没有高低之分；只有习武之人，才有强弱之别。&lt;/p&gt;</summary><category term="java"></category><category term="ide"></category><category term="editor"></category><category term="eclipse"></category></entry><entry><title>Java注解学习</title><link href="lizherui.github.io/javazhu-jie-xue-xi.html" rel="alternate"></link><updated>2013-07-22T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:lizherui.github.io,2013-07-22:javazhu-jie-xue-xi.html</id><summary type="html">&lt;p&gt;初识Java注解是在学习Spring的时候，发现了大量如@Autowired的语法，这种语法在其它语言中很少见，于是对Java独特的注解有了兴趣。Google了一下Java注解的概念：Java注解就是对某种事物添加一个注释说明的意思，标注某种事物的特征以及形态，供日后其它人遇到该事物时有一个直观的认识。JAVA语言提供一套机制，可以在包、类、方法、字段、方法参数、局部变量、构造器和注解这些元素上添加标注，还可以通过JAVA的反射机制获得这些元素的标识信息，做进一步的操作。&lt;/p&gt;
&lt;p&gt;Java的注解让我第一时间联想到了Python中的装饰器。虽然它俩语法都是一样的，有一些Wrapper的影子，实际上还是挺有差别的。Java的注解更算是一种元数据，Python的装饰器更算是一种语法糖。举例如下,先是Python的一个小小wrapper的实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;makebold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;b&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/b&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;wrapped&lt;/span&gt;

&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;makeitalic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;i&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/i&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;wrapped&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;makebold&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;makeitalic&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;

&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
    &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在Java中，需要这样实现：
首先定义注解&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;ElementType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;METHOD&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Retention&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;RetentionPolicy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RUNTIME&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;TagWrapper&lt;/span&gt;     &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;TextFragment&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;getText&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后使用注解：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;BoldItalicFragment&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;TextFragment&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;_text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;BoldItalicFragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;TagWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;i&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;getText&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后解析注解并得到结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;static&lt;/span&gt; &lt;span class="nb"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TagWrapperProcessor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="nx"&gt;getWrapperTextFragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;TextFragment&lt;/span&gt; &lt;span class="nx"&gt;fragment&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;Method&lt;/span&gt; &lt;span class="n"&gt;getText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fragment.getClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;getMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;getText&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;TagWrapper&lt;/span&gt; &lt;span class="n"&gt;tagWrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getText.getAnnotation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;TagWrapper.class&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;formatString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;%s&amp;gt;%s&amp;lt;/%s&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;getText.invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;fragment&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="kt"&gt;tag&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tagWrapper.value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;formatString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;tag&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;Exception&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RuntimeException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;testStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// prints: &amp;lt;i&amp;gt;&amp;lt;b&amp;gt;Hello, World!&amp;lt;/b&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;System.out.println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;TagWrapperProcessor.getWrapperTextFragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BoldItalicFragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们看到，Java中注解与反射是息息相关的，尤其是解析注解的时候，需要用到很多的反射，如fragment.getClass().getMethod( "getText" )取得类中getText方法，再通过getText.getAnnotation( TagWrapper.class )取得该方法的注解，期间还使用
getText.invoke( fragment )反射机制调用类中的方法。&lt;/p&gt;
&lt;p&gt;对比Java中的注解与Python中的装饰器，我们发现Java的注解更像是一种元数据，即数据的数据，主要用来创建文档，跟踪代码的依赖性，执行编译时格式检查，代替已有的配置文件等等。而Python的装饰器更像是一种语法糖，简化那些包装函数相关需求的写法，使代码更加简洁，而且这种需求在Java的注解中，甚至还往往需要配合设计模式来实现。&lt;/p&gt;
&lt;p&gt;Java除了自定义注解之外，还有3个比较常用的内置标准注解：
@Override，表示当前方法是覆盖父类的方法。
@Deprecated，表示当前元素是不赞成使用的。
@SuppressWarnings，表示关闭一些不当的编译器警告信息。&lt;/p&gt;
&lt;p&gt;@Override说明了被标注的方法重载了父类的方法，起到了断言的作用。如果我们使用了这种annotation在一个没有覆盖父类方法的方法时，java编译器将以一个编译错误来警示。
    因此这个annotaton常常在我们试图覆盖父类方法而确又写错了方法名时发挥威力。
举例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;I eat like a generic Animal.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Wolf&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt; 
   &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Eat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;I eat like a wolf!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个时候编译器就会报错。&lt;/p&gt;
&lt;p&gt;同时这个注解也增强了代码的可读性，能很直观得看到哪些方法被重写了。&lt;/p&gt;
&lt;p&gt;@Deprecated是一个标记注释。所谓标记注释，就是在源程序中加入这个标记后，并不影响程序的编译，但有时编译器会显示一些警告信息。 使用Deprecated标注一个类成员后，这个类成员在显示上就会有一些变化。在eclipse中非常明显，在Vim中没有反应。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://lh4.googleusercontent.com/-ol6SlnBkLtE/UezpMHMX8YI/AAAAAAAAAFE/N8-2pgvaOHM/s231/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;这些变化并不会影响编译，只是提醒一下我们，这个方法以后是要被删除的，最好别用。 &lt;/p&gt;
&lt;p&gt;@SuppressWarnings注解主要目的是屏蔽警告。@SuppressWarnings("unchecked")执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型。@SuppressWarning(“deprecation”)屏蔽使用了不赞成使用的类或方法时的警告，@SuppressWarnings("serial")屏蔽当在可序列化的类上缺少serialVersionUID定义时的警告。&lt;/p&gt;
&lt;p&gt;综上，Java这三个内置的注解基本是在用简洁的语法的起一些辅助的作用，给人感觉Java注解的威力并没有完全发挥出来，那么我们看看Java注解在Spring中的应用。&lt;/p&gt;
&lt;p&gt;注解在Spring中运用非常广泛，如@Autowired注解， @Qualifier注解
，@Resource注解，@Component注解等等，其中运用最广泛的@Autowire在Spring自动装配的机制中起到了举足轻重的作用，下面举一个例子：&lt;/p&gt;
&lt;p&gt;首先定义一个简单的Person类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Person [name=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再定义一个Customer类，使用该注解：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Customer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Autowired&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="nf"&gt;getPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getAction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Customer [person=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, type=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, action=&amp;quot;&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;定义SpringBeans.xml完成配置工作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;beans&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/beans&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/beans&lt;/span&gt;
&lt;span class="s"&gt;http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;customer&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.lizherui.common.Customer&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;action&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;buy&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;person1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.lizherui.common.Person&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mkyongA&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们发现，有了@ Autowired注解后，并不需要在&lt;bean id="customer" class="com.lizherui.common.Customer" &gt;里显示声明&lt;property name="person" ref="person1"/&gt;了，Spring会自动装配。&lt;/p&gt;
&lt;p&gt;最后建立App完成程序的输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ApplicationContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ClassPathXmlApplicationContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;SpringBeans.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;cust&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getBean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;customer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cust&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最终成功输出结果： &lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://lh6.googleusercontent.com/-drtoGfrKGjI/UezpOvzDNwI/AAAAAAAAAFQ/SPKB3zPd1iQ/s415/2.png" /&gt;&lt;/p&gt;
&lt;p&gt;总结：@Autowired注解与自动装配用一两拨千金的方式完成了容器中Bean的装配工作，这种便捷的方式的确让使用者感到很省心，而且代码可读性也大大提高。但是这个功能同时也是一把双刃剑，减轻配置工作的同时，也造成了Bean之间的关系不明确、不清晰，容易造成潜在的错误，比如说通过byName来装配，如果将属性名字改了后，Spring就不会将其自动装配给Bean的属性了，这个时候该属性值为null,而且Spring还不会抛出错误，因为通过属性注入的时候，属性值是可以选择的。而如果程序中有其他地方引用了该属性，将不可以避免的抛出NullPointerException异常。&lt;/p&gt;
&lt;p&gt;话说回来，任何能让事情更加自动化智能化的机制都会有这样的风险，所以我们在享受自动化便利的同时，应更加仔细地使用这样的机制。&lt;/p&gt;
&lt;p&gt;Java注解与自动装配的这种设计确实让初学者或是刚从C++/PHP转到Java的开发人员大开眼界。我比较喜欢把编程语言可以分为4类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;面向过程系：如C；&lt;/li&gt;
&lt;li&gt;面向对象系：如C++, Java；&lt;/li&gt;
&lt;li&gt;解释性脚本系：如PHP, Python；&lt;/li&gt;
&lt;li&gt;函数式编程系：如Common Lisp, Scheme。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;无论使用哪种语言，其实质都是对抽象层次的控制。而对抽象层次控制的
键在于解耦、分层，使代码满足紧凑性、正交性的基本原则。Java的这种设计让人惊叹它把面向对象的设计思想做到了极致，连在A类中声明一个B类对象都需要解耦到xml中完成配置，以更加靠近数据驱动编程的目标。虽然《Unix编程艺术》一书中对Java的这种设计诟病已久，但是我觉得Java提倡厚重的胶合层以及使得抽象变得过分容易这种设计在面对GUI的项目或是复杂的企业级WEB开发项目时，无疑是利大于弊的。但是在面对小型项目或者敏捷性开发项目的时候，Java的这种厚胶合层设计又显得过分复杂了。这个时候，Python、PHP这类简单粗暴有效的脚本型语言就到了大显身手的时候了。&lt;/p&gt;</summary><category term="java"></category><category term="annotations"></category></entry><entry><title>滑雪</title><link href="lizherui.github.io/hua-xue.html" rel="alternate"></link><updated>2013-07-21T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:lizherui.github.io,2013-07-21:hua-xue.html</id><summary type="html">&lt;p&gt;没想到才来公司两周，就赶上了大型Outing。&lt;/p&gt;
&lt;p&gt;第一次滑雪还是在大二的冬天，跟着班上几个要好的同学去的北京郊区一个雪场。从那时起就对滑雪很有好感，很刺激。&lt;/p&gt;
&lt;p&gt;这次是跟着公司的人去滑雪。一路上让我愈发感到淘宝的人实在是太开放了，不停地开玩笑互黑。&lt;/p&gt;
&lt;p&gt;到雪场后，我直接选择了中级滑道。果然，几年没滑，非常生疏，连摔两次，屁股很痛。&lt;/p&gt;
&lt;p&gt;滑的途中我看到一个哥们不慎滑倒，更不幸的是脸砸到了滑板上，破了很大的一个口子，不住地流血，看样子是要破相了。他一脸黑线地坐在了一旁，一直用纸巾捂着脸上的伤口。&lt;/p&gt;
&lt;p&gt;我不知道他那时在想什么。这种倒霉的事情发生在任何人身上都会感到很郁闷。&lt;/p&gt;
&lt;p&gt;但是别忘了，滑雪是一个有风险的事情。&lt;/p&gt;
&lt;p&gt;每次从高台上出发时，我都在纠结，刚滑下去时要不要刹车减速。如果一开始就刹车减速，虽然不容易滑倒，但整个滑雪过程由于速度慢就不太刺激了；如果一开始就全速出发，虽然整个滑雪过程感到很刺激，但又比较容易失控滑倒。&lt;/p&gt;
&lt;p&gt;刺激or安全？风险or收益？怎么去平衡它们，怎么去不断地调节平衡点，是一件非常有意思的事情。&lt;/p&gt;
&lt;p&gt;晚上回到出租房，陪美女室友看完电视，帮她装自行车装到很晚。&lt;/p&gt;
&lt;p&gt;这些天，我感到这个出租房越来越有家的感觉了。白天各自上班，晚上大家一起看看电视聊聊天。&lt;/p&gt;
&lt;p&gt;说一下这个室友吧。人非常漂亮，从小到大都是班花。做事情也很不错，上得厅堂下得厨房，很讨人喜欢。作为一名新人hr，工作非常辛苦，每天回来也挺晚，总是黑眼圈，非常不容易。&lt;/p&gt;
&lt;p&gt;能找到这样的合租妹子，真是缘分。&lt;/p&gt;
&lt;p&gt;有的时候我强烈感觉，很多事情，仿佛就是事先设计好了一样。&lt;/p&gt;
&lt;p&gt;没错，这就是命。&lt;/p&gt;</summary><category term="生活"></category></entry><entry><title>淘宝这个公司</title><link href="lizherui.github.io/tao-bao-zhe-ge-gong-si.html" rel="alternate"></link><updated>2013-07-13T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:lizherui.github.io,2013-07-13:tao-bao-zhe-ge-gong-si.html</id><summary type="html">&lt;p&gt;我来淘宝一周了。&lt;/p&gt;
&lt;p&gt;这一周在淘宝的所见所闻总是让我不自觉地联想起在百度工作的日子。&lt;/p&gt;
&lt;p&gt;我觉得是时候总结一下了。&lt;/p&gt;
&lt;h3&gt;团队氛围&lt;/h3&gt;
&lt;p&gt;百度沉闷，淘宝风骚。&lt;/p&gt;
&lt;p&gt;我喜欢把工程师分成两种人："书呆子""与"嬉皮士"。&lt;/p&gt;
&lt;p&gt;百度的工程师是典型的"书呆子"，就是校园里喜欢闷头闷脑搞学习、成绩总是排在年级最前面、平时不怎么爱说话的那批人，这其实也是大众眼里典型的技术男形象。&lt;/p&gt;
&lt;p&gt;但是，实际上，还有另外一种工程师，他们就是“嬉皮士”。&lt;/p&gt;
&lt;p&gt;淘宝的工程师是典型的“嬉皮士”。他们在学校里那会儿往往就不喜欢按部就班地搞学习，但是喜欢捣腾钻研自己真正感兴趣的东西；他们的期末总成绩往往不是年级顶尖，但是自己喜欢的学科却又是高分在上；他们特别喜欢互相开玩笑逗乐子，总是黑别人也总是被别人黑。&lt;/p&gt;
&lt;p&gt;在百度，说起大学的课堂，大家就开始讨论哪门课最难学，哪个老师讲课最有水平；&lt;/p&gt;
&lt;p&gt;在淘宝，说起大学的课堂，大家就开始讨论哪门课最易逃，哪个老师上课从不点名。&lt;/p&gt;
&lt;p&gt;我去百度面试，面试官总是给出几道算法题后让我慢慢想，然后就忙自己的事去了。整个面试过程特别闷。&lt;/p&gt;
&lt;p&gt;我去淘宝面试，面试官不仅和我交流互动，还特别喜欢拿我开玩笑。整个面试过程充满了欢声笑语。&lt;/p&gt;
&lt;p&gt;你是“书呆子”，还是“嬉皮士”？&lt;/p&gt;
&lt;h3&gt;工程师文化&lt;/h3&gt;
&lt;p&gt;百度封闭，淘宝开放。&lt;/p&gt;
&lt;p&gt;说到开放这个事情，我常常感叹于这个页面&lt;a href="https://github.com/alibaba"&gt;https://github.com/alibaba&lt;/a&gt;上这些大名鼎鼎的开源项目:Tengine, LVS, tfs, tair, oceanbase, fastjson, webx, taocode, zeux, ali_kernel, druid……&lt;/p&gt;
&lt;p&gt;百度什么都没有。&lt;/p&gt;
&lt;p&gt;封闭的工程师文化最大的影响就是各个部门甚至各个小组的开发人员做了很多类似的东西，看起来个体效率高，但整体效率就下去了，这也是百度加班极其严重的原因之一。我印象最深的事情是一个小项目需要用到memcached，开发人员居然自己在线上那几台机器搭建起来网上随便下载的某个版本的memcached。memcached这个级别的技术居然都不是全公司统一部署、管理。&lt;/p&gt;
&lt;p&gt;淘宝内网上有很多大家分享的技术心得和插件。就连新员工配置microsoft outlook/mac mail这种小事情，淘宝都有一键完成配置的插件可以下载。&lt;/p&gt;
&lt;p&gt;我觉得这是一件很严肃的事情，它反映了最根本的工程师态度：任何事情都要追求自动化。&lt;/p&gt;
&lt;p&gt;我在百度的时候问过好几次leader：团队里的各种大牛能不能分享一些技术tips，我自己也想分享vim一些强悍的配置技巧。但每次都被leader拍回去：这种事情还是有所保留为好。&lt;/p&gt;
&lt;h3&gt;技术风格&lt;/h3&gt;
&lt;p&gt;百度陈腐，淘宝花哨。&lt;/p&gt;
&lt;p&gt;百度使用Thinkpad + win 7/xp + 盗版的secureCRT + 百度的工程师随处可见。&lt;/p&gt;
&lt;p&gt;淘宝使用Macbook Pro/Air + Mac OS X + Vim/Emacs + Google的工程师随处可见。&lt;/p&gt;
&lt;p&gt;百度的工程师居然有相当一部人不知道github这样的网站，这在淘宝是不可想象的。&lt;/p&gt;
&lt;p&gt;这个话题我不想再对比了，百度被甩得很远。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;如果你是“书呆子”，建议选择百度。&lt;/p&gt;
&lt;p&gt;如果你是“嬉皮士”，建议选择淘宝。&lt;/p&gt;</summary><category term="工作"></category><category term="淘宝"></category><category term="百度"></category><category term="公司"></category></entry><entry><title>用eclim把vim打造成强悍的java开发利器</title><link href="lizherui.github.io/yong-eclimba-vimda-zao-cheng-qiang-han-de-javakai-fa-li-qi.html" rel="alternate"></link><updated>2013-07-11T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:lizherui.github.io,2013-07-11:yong-eclimba-vimda-zao-cheng-qiang-han-de-javakai-fa-li-qi.html</id><summary type="html">&lt;p&gt;对于常年习惯用vim编写c系、script系、lisp系语言的人来说，初转java最头疼的事情就是vim对java的支持实在太弱，被eclipse完爆。但是vim控突然转到eclipse会觉得很失落，尤其是eclipse那臃肿的界面和孱弱的编辑功能。vim关于java的插件按从轻到重的顺序只有区区3个：javacomplete.vim, vjde, eclim。前2个实在是太弱太难配置，好在开源社区贡献了强悍的eclim:The power of Eclipse in your favorite editor. &lt;/p&gt;
&lt;p&gt;eclim安装很简单：去http://eclim.org/上下载下来后，执行java -jar eclim_2.2.6.jar一路next就可以了，相关文档在官网都有。有几个地方要说明一下：&lt;/p&gt;
&lt;p&gt;相关配置有6个地方:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;EclimJavaCompleteCaseSensitive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;EclimSignLevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;EclimLogLevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;EclimJavaSearchSingleResult&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tabnew&amp;#39;&lt;/span&gt;
&lt;span class="nx"&gt;autocmd&lt;/span&gt; &lt;span class="nx"&gt;FileType&lt;/span&gt; &lt;span class="nb"&gt;java&lt;/span&gt; &lt;span class="nx"&gt;inoremap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="na"&gt;-x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="na"&gt;-u&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;autocmd&lt;/span&gt; &lt;span class="nx"&gt;FileType&lt;/span&gt; &lt;span class="nb"&gt;java&lt;/span&gt; &lt;span class="kt"&gt;map&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;F2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;JavaSearchContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;补全的话自带的ctrl+x ctrl+u按起来太麻烦，我给改成tab了，此外我喜欢大小写敏感的补全。&lt;/p&gt;
&lt;p&gt;eclim其实就相当于让vim充当了eclispe的前端界面，把eclipse中的几乎全部功能都一一映射成为vim中的命令，这样既拥有eclipse强大的补全、一键运行以及各种杂七杂八的实用功能，又能体验vim强悍的编辑快感，真的是The power of Eclipse in your favorite editor啊。&lt;/p&gt;
&lt;p&gt;eclim的官方文档挺长的，后续一些使用技巧也会在实战中逐渐学习。&lt;/p&gt;</summary><category term="vim"></category><category term="java"></category><category term="eclim"></category><category term="editor"></category></entry><entry><title>第一天上班</title><link href="lizherui.github.io/di-tian-shang-ban.html" rel="alternate"></link><updated>2013-07-08T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:lizherui.github.io,2013-07-08:di-tian-shang-ban.html</id><summary type="html">&lt;p&gt;预料到杭州公交堵，没想到这么堵，还特别挤，堪比北京的早高峰10号线，最终迟到了半小时。&lt;/p&gt;
&lt;p&gt;各种入职手续、培训办得好累。。。&lt;/p&gt;
&lt;p&gt;4点半被老大领到工位，总算安顿下来了，虽然啥也没干。&lt;/p&gt;
&lt;p&gt;明天继续学Java~&lt;/p&gt;</summary><category term="工作"></category><category term="杭州"></category><category term="阿里"></category></entry><entry><title>关于我</title><link href="lizherui.github.io/guan-yu-wo.html" rel="alternate"></link><updated>2013-07-07T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:lizherui.github.io,2013-07-07:guan-yu-wo.html</id><summary type="html">&lt;p&gt;我来自北邮。&lt;/p&gt;
&lt;p&gt;我在百度实习过大半年，但实在是不太喜欢百度这个公司，于是在毕业前离开了那里。&lt;/p&gt;
&lt;p&gt;我最终决定加入阿里。&lt;/p&gt;
&lt;p&gt;我热爱编程，开发环境嗜好Mac OS X + oh-my-zsh + Vim + Git的组合，以及clang + gdb进行编译、调试。键盘流，快捷键党，尤其反感编程的时候用鼠标的编程习惯。编程语言方面熟悉c/c++/python/php，最近正在学习java，有代码洁癖，平时没事喜欢看点源码，常年混迹github，google group等等开源相关的社区。&lt;/p&gt;
&lt;p&gt;我崇尚Geek文化与黑客精神，喜欢小众的东西，热爱一切简洁、快速且强壮的事物。&lt;/p&gt;
&lt;p&gt;我热爱竞争。大四找工作这一年拼得很凶，对于任何竞争，我都无比渴望获胜。&lt;/p&gt;
&lt;p&gt;我就是这样的一个人。&lt;/p&gt;</summary></entry><entry><title>初到杭州</title><link href="lizherui.github.io/chu-dao-hang-zhou.html" rel="alternate"></link><updated>2013-07-06T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:lizherui.github.io,2013-07-06:chu-dao-hang-zhou.html</id><summary type="html">&lt;p&gt;在入职淘宝的前一周，我来到杭州。&lt;/p&gt;
&lt;p&gt;我拖着行李刚走出火车，就被黑车党团团围住。好不容易挣脱了黑车党，打的士又陷入困境。一个人来到完全陌生的城市打拼，真的是很不容易。&lt;/p&gt;
&lt;p&gt;幸运的是，很快就在豆瓣找到了合租的人，并找到了一个不错的房子，虽然地段稍微有点远。不过以后可以考虑骑公共自行车上班，顺便锻炼身体。&lt;/p&gt;
&lt;p&gt;技术方面的话，自从5月底离开百度后就没怎么练了。再不练，武功就废了。坚持看完了SICP第二章，感到越来越吃力(实在太抽象了)，于是决定暂缓第三章的学习计划。考虑到淘宝大量使用JAVA,于是开始学习《JAVA编程思想》，想尽快入门JAVA。&lt;/p&gt;
&lt;p&gt;周末和向楠、倪灿在西湖旁边吃了个饭，聊了聊很多往事，感慨万千。&lt;/p&gt;
&lt;p&gt;下周一就要入职了，感觉压力很大。&lt;/p&gt;
&lt;p&gt;上路了，毕业生。&lt;/p&gt;</summary><category term="生活"></category><category term="工作"></category><category term="杭州"></category></entry></feed>